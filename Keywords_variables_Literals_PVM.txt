1. Script mode: It is also known as "Module". A file which contains HLL code and has extention.py, 
provoding a script as a input to the Interpriter.

Ex:
print("My name is Udaybhanu")
print("I'm a trainee software engineer at Ojas")
print("Emp_Id: 21095")

Output:
My name is Udaybhanu
I'm a trainee software engineer at Ojas
Emp_Id: 21095
>>> 

=====================================================================================================================

2. Interactive mode: A Python code can be directly provided as input to the Interpriter line by line without 
   storing in file. 

Ex:
>>> print("My name is Uday Bhanu")
My name is Uday Bhanu

>>> print("I'm trainee software engineer at Ojas")
I'm trainee software engineer at Ojas

>>> print("Emp_Id: 21095")
Emp_Id: 21095
>>> 

=======================================================================================================================

3. Variables: A Python variable is a reserved memory location to store values.

Ex:
a = 5 

Here, "a" is Variable and "5" is Value. They both are combined by the Operator "=".

========================================================================================================================

4. Documentation String: The Description about what a Function does can be stored with in Documentation String in Python.

* It is enclosed with in multiple quotes. Ex: ['''__''' / """__"""]
* The Documentation String automatically store with in (__doc__).

Ex:
def calc(x,y):
    """calc() add, sub, mul, div
    input: Two integers
    outout: returns four values"""

    a = x + y;
    b = x - y;
    c = x * y;
    d = x / y;
    return a, b, c, d

print(calc.__doc__)

res1, res2, res3, res4 = calc(200, 100)
print(res1, res2, res3, res4)

Outut:
calc() add, sub, mul, div
    input: Two integers
    outout: returns four values
300 100 20000 2.0
>>> 

=======================================================================================================================

5. Keywords: Keywords are the reserved words in Python.
 
* We cannot use a keyword as a variable name, function name or any other identifier. 
* They are used to define the syntax and structure of the Python language. 
* In Python, keywords are case sensitive.
* These are keywords in Python 3.7.
>>>
1. False: The False keyword is a Boolean value, and result of a comparison operation. 
* The False keyword is the same as 0.

2. True: The True keyword is used as the Boolean true value in Python code.
* The True keyword is the same as 1.

3. None: The None keyword is used to define a null variable or an object. 
* In Python, None keyword is an object, and it is a data type of the class NoneType .

4. import: The import keyword is used to import other modules into a Python script.

5. class: The class keyword is used to create a class.
* A class is like an object constructor.

6. def: Keyword def that marks the start of the function header. 
* A function name to uniquely identify the function. 
* One or more valid python statements that make up the function body. 
* Statements must have the same indentation level (usually 4 spaces). 
* An optional return statement to return a value from the function.

7. if: The if keyword is used to create conditional statements (if statements).
* It allows you to execute a block of code only if a condition is True.

8. else: The else keyword is used in conditional statements (if statements).
* It decides what to do if the condition is False. 
* The else keyword can also be use in try... except blocks.

9. elif:The elif statement allows you to check multiple expressions for TRUE.
* It execute a block of code as soon as one of the conditions evaluates to TRUE.

10. for: The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. 
* Iterating over a sequence is called traversal.

11. while: The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true. 
* We generally use this loop when we don't know the number of times to iterate beforehand. 

12. break: The break statement in Python terminates the current loop and resumes execution at the next statement,
    just like the traditional break found in C. 
* The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. 
* The break statement can be used in both while and for loops.

13. continue: The continue statement in Python returns the control to the beginning of the while loop.
* The continue statement rejects all the remaining statements in the current iteration of the loop 
  and moves the control back to the top of the loop. 
*The continue statement can be used in both while and for loops.

14. return: The Python return statement is a special statement that you can use inside a function or 
    method to send the function's result back to the caller. 
* A return statement consists of the return keyword followed by an optional return value. 
* The return value of a Python function can be any Python object.

15. yield: yield is a keyword in Python that is used to return from a function without destroying the states of its local variable.
* When the function is called, the execution starts from the last yield statement. 
* Any function that contains a yield keyword is termed as generator. Hence, yield is what makes a generator

16. pass: In Python, the pass keyword is an entire statement in itself. 
* This statement doesn't do anything: it's discarded during the byte-compile phase. 
* But for a statement that does nothing, the Python pass statement is surprisingly useful. 
* Sometimes pass is useful in the final code that runs in production.

17. from: The from keyword is used for importing a specific variable, class, or a function from a module.

18. as: The as keyword is used to create an alias.

19. in: The 'in' operator is used to check if a value exists in a sequence or not. 
* Evaluates to true if it finds a variable in the specified sequence and false otherwise.

20. is: The "is" keyword is used to test if two variables refer to the same object. 
* The test returns True if the two objects are the same object. 
* The test returns False if they are not the same object, even if the two objects are 100% equal. 
* Use the == operator to test if two variables are equal.

21. global: In Python, global keyword allows you to modify the variable outside of the current scope. 
* It is used to create a global variable and make changes to the variable in a local context.

22. nonlocal:The nonlocal keyword is used to work with variables inside nested functions, 
   where the variable should not belong to the inner function.  
* Use the keyword nonlocal to declare that the variable is not local.

23. del: The del keyword is used to delete objects. 
* In Python everything is an object, so the del keyword can also be used to delete variables, lists, or parts of a list etc.

24. assert: The assert keyword is used when debugging code. 
* The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError. 

25. lambda: A lambda function is a small anonymous function.
* A lambda function can take any number of arguments, but can only have one expression.

26. try: The try block lets you test a block of code for errors.

27. except: The except block lets you handle the error.

28. finally: The finally block lets you execute code, regardless of the result of the try- and except blocks.

29. raise: The raise keyword is used to raise an exception.
* We can define what kind of error to raise, and the text to print to the user.

30. await: The keyword await passes function control back to the event loop. (It suspends the execution of the surrounding coroutine.)

31. with: with statement in Python is used in exception handling to make the code cleaner and much more readable. 
* It simplifies the management of common resources like file streams. 

32. and: The not keyword is a logical operator.
* The return value will be True if both the operands are true

33. or: The not keyword is a logical operator.
* The return value will be True if either of the operands is true

34. not: The not keyword is a logical operator.
* The return value will be True if the statement(s) are not True, otherwise it will return False.

35. ascync: asyncio is a library to write concurrent code using the async/await syntax.
* Asyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, 
 database connection libraries, distributed task queues, etc.
* Asyncio is often a perfect fit for IO-bound and high-level structured network code.

Ex:
import asyncio

async def main():
    print('Hello ...')
    await asyncio.sleep(1)
    print('... World!')

# Python 3.7+
asyncio.run(main())

Output: 
Hello ...  # Here. it will wait for 1 sec to print next statement
... World!
>>> 

========================================================================================================================

6. Literals: A literal is a succinct and easily visible way to write a value.
 
* Literals represent the possible choices in primitive types for that language. 
* Some of the choices of types of literals are often integers, floating point, Booleans and character strings.

Ex: 

1. Boolean -->> True & False.
2. Numeric -->> int, float, complex, Octal and Hexadecimal.
3. String -->> Single line & Multi line Strings.
4. Special -->> None ( It has its Own datatype "None")
5. Collections -->> List, Tuple, Set & Dictionary.

========================================================================================================================

7. Git & Github: git and GitHub are not the same thing.

@Git: Git is an open-source, version control tool created in 2005 by developers working on the Linux operating system.

* We do not need GitHub to use git.
* You do not need to use a remote to use git, but it will make sharing your code with others easier.

@GitHub: GitHub is a company founded in 2008 that makes tools which integrate with git.

* We cannot use GitHub without using git.
* There are many other alternatives to GitHub, such as GitLab, BitBucket, and “host-your-own” solutions 
  such as gogs and gittea.

=======================================================================================================================

8. Pip:  pip is the standard package manager for Python. 

* It allows you to install and manage additional packages that are not part of the Python standard library.
* Finding packages published to the Python Package Index (PyPI).
* Managing requirements for our scripts and applications
* Uninstalling packages and their dependencies

======================================================================================================================
9. PVM: Python Virtual Machine

* PVM is nothing but a software/interpreter that converts the byte code to machine code for given operating system. 
* PVM is also called Python Interpreter and this is the reason Python is called an Interpreted language. 
* We can't see the Byte Code of the program because this happens internally in memory.

@Memory Management in Python:
*For every object, memory has to be allocated. This task is done by the Memory Manager located inside the PVM. 
*All of the objects created are stored in a separate memory called heap. 
*It is the memory which is allocated during runtime.
-------------------------------------###---------------------------------------------------------------------------------
